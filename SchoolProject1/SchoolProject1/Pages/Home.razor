@page "/"
@using SchoolProject1.Functionality
@inject NavigationManager _nav

<html>
    <body>
        
        <div class="top-row px-4 w-100">
            <a style="float: left" class="btn btn-primary" href="settings">Settings</a>
        </div>

        <div style="width: 100%; overflow:auto;" class="vh-100">
            <div style="width: 60%; border-right-style: solid; border-right-width: 1px; float: left" class="vh-100">
                <div style="width: 90%; float: left">
                    <table class="table">
                        <thead>
                            <tr>
                                @if (StandardModel.ColumnCount >= 1)
                                {
                                    <th class="center">Column 1</th>
                                }

                                @if (StandardModel.ColumnCount >= 2)
                                {
                                    <th class="center">Column 2</th>
                                }

                                @if (StandardModel.ColumnCount >= 3)
                                {
                                    <th class="center">Column 3</th>
                                }

                                @if (StandardModel.ColumnCount >= 4)
                                {
                                    <th class="center">Column 4</th>
                                }

                                @if (StandardModel.ColumnCount >= 5)
                                {
                                    <th class="center">Column 5</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var item in TableValuesTemp5)
                        {
                            <tr>
                                @if (StandardModel.ColumnCount == 1)
                                {
                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn1(item, e))" value="@item.Column1" class="center w-100" />
                                    </td>
                                }

                                @if (StandardModel.ColumnCount == 2)
                                {
                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn1(item, e))" value="@item.Column1" class="center w-100" />
                                    </td>

                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn2(item, e))" value="@item.Column2" class="center w-100" />
                                    </td>
                                }

                                @if (StandardModel.ColumnCount == 3)
                                {
                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn1(item, e))" value="@item.Column1" class="center w-100" />
                                    </td>

                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn2(item, e))" value="@item.Column2" class="center w-100" />
                                    </td>
                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn3(item, e))" value="@item.Column3" class="center w-100" />
                                    </td>
                                }

                                @if (StandardModel.ColumnCount == 4)
                                {
                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn1(item, e))" value="@item.Column1" class="center w-100" />
                                    </td>

                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn2(item, e))" value="@item.Column2" class="center w-100" />
                                    </td>

                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn3(item, e))" value="@item.Column3" class="center w-100" />
                                    </td>

                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn4(item, e))" value="@item.Column4" class="center w-100" />
                                    </td>
                                }

                                @if (StandardModel.ColumnCount == 5)
                                {
                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn1(item, e))" value="@item.Column1" class="center w-100" />
                                    </td>

                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn2(item, e))" value="@item.Column2" class="center w-100" />
                                    </td>

                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn3(item, e))" value="@item.Column3" class="center w-100" />
                                    </td>

                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn4(item, e))" value="@item.Column4" class="center w-100" />
                                    </td>

                                    <td>
                                        <input role="textbox" rows="1" @oninput="((e) => EditColumn5(item, e))" value="@item.Column5" class="center w-20" />
                                    </td>
                                }
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>

                <div style="width: 10%; float: right">

                <br />
                <br />

                @for (int i = 0; i < TableValuesTemp3.Count; i++)
                {
                    var j = i;

                    <button class="btn btn-outline-danger center" style="margin-left: 25%; margin-right: 25%; width: 50%; margin-bottom: 8px" @onclick="(() => DeleteIndex(j))">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                        </svg>
                    </button>
                }
            </div>

            <button class="bi bi-plus btn btn-primary plus" @onclick="AddInstances">+</button>

            </div>
            <div style="width: 40%; border-bottom-style: solid; border-bottom-width: thin; float: right" class="h-50">
                <br/>

                <h1 style="width: 100%; text-align: center; font-size: 100px">@GetTime()</h1>
                <h2 style="width: 100%; text-align: center; font-size: 60px">@GetDate()</h2>
            </div>

            <div style="width: 40%; float: right" class="h-50">
                <textarea class="library vh-50" style="width: 100%" rows="8" />
            </div>
        </div>
    </body>
</html>

<style>
    .plus {
        margin-left: 45%;
        margin-top: 50px;
        align-content: center;
    }

    .center {
        text-align: center;
    }

    .library {
        font-size: 40px;
    }

    body {
        overflow: hidden;
    }

</style>

@code
{
    List<TableValues1> TableValuesTemp1 { get; set; } = TableValues.Table1;
    List<TableValues2> TableValuesTemp2 { get; set; } = TableValues.Table2;
    List<TableValues3> TableValuesTemp3 { get; set; } = TableValues.Table3;
    List<TableValues4> TableValuesTemp4 { get; set; } = TableValues.Table4;
    List<TableValues5> TableValuesTemp5 { get; set; } = TableValues.Table5;
    static System.Timers.Timer _timer;
    int _counter = 60;
    string Time { get; set; } = GetTime();
    string Date { get; set; } = GetDate();

    public async void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (_counter > 0)
        {
            Time = GetTime();
            Date = GetDate();
        }
        else
        {
            _timer.Enabled = false;
        }

        await InvokeAsync(async () =>
        {
            StateHasChanged();
        });
    }

    protected override void OnInitialized()
    {
        StandardModel.IsSettings = false;

        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += CountDownTimer;
        _timer.Enabled = true;

    }

    static string GetTime() 
    {
        return $"{DateTime.Now.ToString().Split(' ')[1]} {DateTime.Now.ToString().Split(' ')[2]}";
        // return $"{DateTime.Now.Hour}:{DateTime.Now.Minute}:{DateTime.Now.Second}";
    }
    
    static string GetDate()
    {
        return  $"{DateTime.Now.Day}.{DateTime.Now.Month}.{DateTime.Now.Year}";
    }

    void AddInstances() 
    {
        TableValuesTemp1.Add(new());
        TableValuesTemp2.Add(new());
        TableValuesTemp3.Add(new());
        TableValuesTemp4.Add(new());
        TableValuesTemp5.Add(new());
        TableValuesTemp5.Cast<object>().ToList().Update();
        LocalUpdate(TableValuesTemp5);
    }

    void DeleteIndex(int i)
    { 
        TableValuesTemp1.RemoveAt(i);
        TableValuesTemp2.RemoveAt(i);
        TableValuesTemp3.RemoveAt(i);
        TableValuesTemp4.RemoveAt(i);
        TableValuesTemp5.RemoveAt(i);
        TableValuesTemp5.Cast<object>().ToList().Update();
        LocalUpdate(TableValuesTemp5);
    }

    void EditColumn1(TableValues5 item, ChangeEventArgs e)
    {
        int index = TableValuesTemp5.IndexOf(item);

        TableValuesTemp1[index].Column1 = e.Value.ToString();
        TableValuesTemp2[index].Column1 = e.Value.ToString();
        TableValuesTemp3[index].Column1 = e.Value.ToString();
        TableValuesTemp4[index].Column1 = e.Value.ToString();
        TableValuesTemp5[index].Column1 = e.Value.ToString();
        TableValuesTemp3.Cast<object>().ToList().Update();
    }

    void EditColumn2(TableValues5 item, ChangeEventArgs e)
    {
        int index = TableValuesTemp5.IndexOf(item);

        TableValuesTemp2[index].Column2 = e.Value.ToString();
        TableValuesTemp3[index].Column2 = e.Value.ToString();
        TableValuesTemp4[index].Column2 = e.Value.ToString();
        TableValuesTemp5[index].Column2 = e.Value.ToString();
        TableValuesTemp3.Cast<object>().ToList().Update();
    }

    void EditColumn3(TableValues5 item, ChangeEventArgs e)
    {
        int index = TableValuesTemp5.IndexOf(item);

        TableValuesTemp3[index].Column3 = e.Value.ToString();
        TableValuesTemp4[index].Column3 = e.Value.ToString();
        TableValuesTemp5[index].Column3 = e.Value.ToString();
        TableValuesTemp3.Cast<object>().ToList().Update();
    }

    void EditColumn4(TableValues5 item, ChangeEventArgs e)
    {
        int index = TableValuesTemp5.IndexOf(item);

        TableValuesTemp4[index].Column4 = e.Value.ToString();
        TableValuesTemp5[index].Column4 = e.Value.ToString();
        TableValuesTemp3.Cast<object>().ToList().Update();
    }

    void EditColumn5(TableValues5 item, ChangeEventArgs e)
    {
        int index = TableValuesTemp5.IndexOf(item);

        TableValuesTemp5[index].Column5 = e.Value.ToString();
        TableValuesTemp3.Cast<object>().ToList().Update();
    }

    void LocalUpdate(List<TableValues5> tableValues)
    {
        for (int i = 0; i < tableValues.Count; i++)
        {
            TableValuesTemp1[i].Column1 = tableValues[i].Column1;
            TableValuesTemp1[i].Column1 = tableValues[i].Column1;
            TableValuesTemp1[i].Column1 = tableValues[i].Column1;
            TableValuesTemp1[i].Column1 = tableValues[i].Column1;
            TableValuesTemp1[i].Column1 = tableValues[i].Column1;

            TableValuesTemp2[i].Column2 = tableValues[i].Column2;
            TableValuesTemp2[i].Column2 = tableValues[i].Column2;
            TableValuesTemp2[i].Column2 = tableValues[i].Column2;
            TableValuesTemp2[i].Column2 = tableValues[i].Column2;

            TableValuesTemp3[i].Column3 = tableValues[i].Column3;
            TableValuesTemp3[i].Column3 = tableValues[i].Column3;
            TableValuesTemp3[i].Column3 = tableValues[i].Column3;

            TableValuesTemp4[i].Column4 = tableValues[i].Column4;
            TableValuesTemp4[i].Column4 = tableValues[i].Column4;
        }
    }
}
}
